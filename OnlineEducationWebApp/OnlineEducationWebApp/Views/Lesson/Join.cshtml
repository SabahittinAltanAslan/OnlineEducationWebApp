
@{
    ViewData["Title"] = "Join";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Join</h1>

<div id="videoContainer">
    <!-- Video elements will be added dynamically -->
</div>

<button id="startButton" class="btn btn-primary">Start Video</button>
<button id="stopButton" class="btn btn-secondary">Stop Video</button>
<button id="getUsersButton" class="btn btn-info">Get Users</button>
<ul id="userList"></ul>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>
<script>
    const lessonId = '@ViewBag.LessonId';


    const connection = new signalR.HubConnectionBuilder().withUrl("/lessonHub").build();
    const peers = {};
    let localStream;
    const localVideo = document.createElement('video');
    localVideo.autoplay = true;
    localVideo.muted = true; // Echo önlemek için kendi videonuzu sessize alın
    document.getElementById('videoContainer').appendChild(localVideo);

    async function startVideo() {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            localVideo.srcObject = localStream;
            localStream.getTracks().forEach(track => {
                for (const peerId in peers) {
                    const peerConnection = peers[peerId];
                    if (peerConnection) {
                        peerConnection.addTrack(track, localStream);
                    }
                }
            });
        } catch (err) {
            console.error('Error accessing media devices.', err);
        }
    }

    connection.start().then(function () {
        connection.invoke("JoinLesson", lessonId).catch(function (err) {
            return console.error(err.toString());
        });
    });

    connection.on("UserJoined", async function (userConnectionId) {
        if (!peers[userConnectionId]) {
            const peerConnection = createPeerConnection(userConnectionId);
            peers[userConnectionId] = peerConnection;

            if (localStream) {
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                connection.invoke("SendOffer", lessonId, JSON.stringify(offer), userConnectionId).catch(function (err) {
                    return console.error(err.toString());
                });
            }
        }
    });

    connection.on("UserLeft", function (userConnectionId) {
        removeUserFromList(userConnectionId);
        const peerConnection = peers[userConnectionId];
        if (peerConnection) {
            peerConnection.close();
            delete peers[userConnectionId];
        }
        const remoteVideo = document.getElementById(`video-${userConnectionId}`);
        if (remoteVideo) {
            remoteVideo.srcObject = null;
            remoteVideo.parentNode.removeChild(remoteVideo);
        }
    });

    connection.on("ReceiveOffer", async function (offer, senderConnectionId) {
        const peerConnection = createPeerConnection(senderConnectionId);
        peers[senderConnectionId] = peerConnection;

        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        connection.invoke("SendAnswer", lessonId, JSON.stringify(answer), senderConnectionId).catch(function (err) {
            console.error(err.toString());
        });
    });

    connection.on("ReceiveAnswer", async function (answer, senderConnectionId) {
        const peerConnection = peers[senderConnectionId];
        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(answer)));
    });

    connection.on("ReceiveIceCandidate", async function (candidate, senderConnectionId) {
        const peerConnection = peers[senderConnectionId];
        if (peerConnection) {
            await peerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate)));
        }
    });

    function createPeerConnection(userConnectionId) {
        const peerConnection = new RTCPeerConnection();

        peerConnection.onicecandidate = function (event) {
            if (event.candidate) {
                connection.invoke("SendIceCandidate", lessonId, JSON.stringify(event.candidate), userConnectionId).catch(function (err) {
                    console.error(err.toString());
                });
            }
        };

        peerConnection.ontrack = function (event) {
            let remoteVideo = document.getElementById(`video-${userConnectionId}`);
            if (!remoteVideo) {
                remoteVideo = document.createElement('video');
                remoteVideo.id = `video-${userConnectionId}`;
                remoteVideo.autoplay = true;
                document.getElementById('videoContainer').appendChild(remoteVideo);
            }
            remoteVideo.srcObject = event.streams[0];
        };

        return peerConnection;
    }

    function addUserToList(userConnectionId) {
        const userList = document.getElementById("userList");
        const listItem = document.createElement("li");
        listItem.id = `user-${userConnectionId}`;
        listItem.textContent = userConnectionId;
        userList.appendChild(listItem);
    }

    function removeUserFromList(userConnectionId) {
        const userListItem = document.getElementById(`user-${userConnectionId}`);
        if (userListItem) {
            userListItem.parentNode.removeChild(userListItem);
        }
    }

    document.getElementById("startButton").addEventListener("click", function () {
        startVideo();
    });

    document.getElementById("stopButton").addEventListener("click", function () {
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }
        localVideo.srcObject = null;
        // Remove all remote video elements
        const videoContainer = document.getElementById('videoContainer');
        videoContainer.querySelectorAll('video').forEach(video => {
            if (video !== localVideo) {
                video.srcObject = null;
                videoContainer.removeChild(video);
            }
        });

        // Close all peer connections
        for (const peerId in peers) {
            if (peers[peerId]) {
                peers[peerId].close();
                delete peers[peerId];
            }
        }
    });

    document.getElementById("getUsersButton").addEventListener("click", function () {
        connection.invoke("GetUsersInLesson", lessonId).then(users => {
            const userList = document.getElementById("userList");
            userList.innerHTML = "";
            users.forEach(userConnectionId => {
                addUserToList(userConnectionId);
            });
        }).catch(function (err) {
            console.error(err.toString());
        });
    });
</script>